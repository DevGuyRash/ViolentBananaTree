{
  "id": "snapshot_1760929384480_ajge9b2wd",
  "approvalId": "approval_1760929384478_gllqy6z22",
  "approvalTitle": "DGX steering tech doc",
  "version": 1,
  "timestamp": "2025-10-20T03:03:04.480Z",
  "trigger": "initial",
  "status": "pending",
  "content": "Project Type\nMulti-target browser automation foundation distributed as Tampermonkey/Violentmonkey userscripts with an optional MV3 extension build, implemented in TypeScript and bundled via Vite ecosystems.\n\nPrimary Languages & Tooling\n- **Language**: TypeScript (strict mode) for all packages, workflows, and build tooling.\n- **Runtime/Compiler**: Node.js (LTS) with Vite for bundling userscripts, WXT for MV3 builds.\n- **Package Managers**: npm (workspaces) managing packages under `packages/` and applications under `apps/`.\n\nKey Dependencies & Frameworks\n- **vite-plugin-monkey**: Userscript bundling and dev server with live reload.\n- **WXT**: MV3 bundler ensuring extension parity without webpack.\n- **GM_* APIs**: `GM_getValue`, `GM_setValue`, `GM_deleteValue`, `GM_addValueChangeListener`, `GM_removeValueChangeListener`, `GM_registerMenuCommand`, `GM_addStyle`.\n- **BroadcastChannel**: Cross-tab synchronization for context store updates.\n- **Mermaid** (authoring docs/diagrams) via Vite asset pipeline when required.\n\nApplication Architecture\n- Modular monorepo with packages for core utilities (DOM, waits, resolver), workflows engine, menu HUD, context store, selector definitions, inspector, recorder, and script registry.\n- Userscript shell loads page registry, resolves selectors, mounts HUD, and runs workflows.\n- Optional MV3 build reuses the same packages, exporting content scripts via WXT entrypoints.\n\nData Storage & State\n- Primary storage: Userscript manager key/value store (Tampermonkey/Violentmonkey) accessed via GM APIs.\n- Sync: BroadcastChannel plus GM change listeners for multi-tab coherence.\n- Data format: JSON structures for selector maps, workflow definitions, context values.\n- TTL: Context store enforces optional time-to-live per key during reads.\n\nExternal Integrations\n- Browser APIs only (DOM, events, storage). No backend services or network APIs in MVP.\n- Optional environment variable templating (`${env:NAME}`) for workflows; evaluation occurs client-side.\n\nMonitoring & Observability\n- Logs: `[DGX]` prefixed console logs for workflow start/stop, selector attempts, misses, scroll termination reasons, context changes.\n- Timeline: Recorder and HUD emit structured logs for replay and debugging.\n- Telemetry: Client-side only; potential future opt-in analytics must remain privacy-preserving.\n\nDevelopment Environment\n- Build system: npm scripts orchestrating Vite (userscript) and WXT (extension) builds, plus TypeScript compilation.\n- Watch/Dev: `npm run dev` launches Vite dev server with live reload user script install URL.\n- Code quality: ESLint (TypeScript rules), Prettier or project style conventions, TypeScript strict mode.\n- Testing: Unit/smoke tests for core utilities and workflows engine; manual validation via demo pages and recorder replays.\n- Docs tooling: Markdown-first with Mermaid diagrams; inline JSDoc for critical APIs.\n- Version control: Git with main branch default; Conventional Commit scopes (core, workflows, menu, selectors, inspector, recorder, docs, build).\n\nDeployment & Distribution\n- Userscript distribution: Build outputs `.user.js` files placed under `apps/userscripts/dist`. Dev install served via Vite dev server.\n- Extension distribution: WXT outputs MV3 artifacts under `apps/wxt-extension/dist` ready for packaging/side-loading.\n- Installation requirements: Tampermonkey or Violentmonkey extension installed; for MV3, Chrome/Chromium with developer mode.\n- Updates: Rebuild and reinstall userscript/extension; doc updates accompany releases.\n\nTechnical Requirements & Constraints\n- **Performance**: Default wait polling ≤ 150ms; step timeouts ≤ 8s; scrollUntil max steps and timeout enforced; avoid heavy DOM polling.\n- **Compatibility**: Chrome + Firefox; Tampermonkey and Violentmonkey compatibility guaranteed; MV3 build optional but parity expected.\n- **Security**: No `unsafe-eval`; rely on injected CSS via `GM_addStyle`; sanitize logged data; mask sensitive inputs by default.\n- **CSP**: Userscripts must comply with target page CSP; fallback to MV3 when injection restricted.\n- **Accessibility**: Selector strategies prioritize roles, labels, and accessible names.\n- **Privacy**: No remote telemetry by default; masked recorder inputs; context store scoped per script and namespaced per page.\n\nScalability & Reliability\n- Selector system with scoped fallbacks reduces brittleness; inspector assigns stability scores and notes uniqueness.\n- Workflow engine supports retries/backoff and clear error messaging for recoverability.\n- Scroll and collect utilities enforce termination conditions to avoid infinite loops.\n- Recorder exports reproducible DSL steps ensuring consistent automation results.\n\nTechnical Decisions & Rationale\n1. **Vite + vite-plugin-monkey** chosen for modern build tooling with hot reload and userscript-specific bundling; avoids webpack complexity.\n2. **WXT** selected to share code between userscript and MV3 extension without dual maintenance.\n3. **Logical selector keys** ensure workflows remain implementation-agnostic; inspector/recorder enforces disciplined selector creation.\n4. **GM storage + BroadcastChannel** provide cross-tab state without external services, aligning with privacy-first goals.\n5. **Declarative DSL** offers auditability and spec alignment, contrasting with imperative script automation.\n\nKnown Limitations\n- Userscript storage quotas and BroadcastChannel availability vary by browser; large data sets should remain small.\n- CSP-restricted pages may still block injected styles/scripts; MV3 build is fallback but requires manual installation.\n- Recorder heavy DOM observation could impact performance on extremely complex pages; mitigate via configurable sampling and teardown.\n- No backend telemetry; debugging relies on client logs and HUD feedback.\n\nOpen Technical Questions\n- Whether to adopt optional telemetry/event buffering for workflow analytics post-MVP.\n- Potential schema evolution for selector maps (versioning, migration strategy) as recorder features expand.\n- Strategy for packaging shared TypeScript types for external consumers if the foundation becomes a dependency.\n",
  "fileStats": {
    "size": 6136,
    "lines": 81,
    "lastModified": "2025-10-20T02:56:10.203Z"
  },
  "comments": []
}