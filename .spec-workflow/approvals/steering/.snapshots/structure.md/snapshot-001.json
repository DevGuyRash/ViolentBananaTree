{
  "id": "snapshot_1760929403396_islildhs0",
  "approvalId": "approval_1760929403394_viigzs03x",
  "approvalTitle": "DGX steering structure doc",
  "version": 1,
  "timestamp": "2025-10-20T03:03:23.396Z",
  "trigger": "initial",
  "status": "pending",
  "content": "Directory Organization\n\n```\n/ (repo root)\n  README.md\n  AGENTS.md\n  CONTRIBUTING.md\n  RECORDER.md\n  project_overview.md\n  .spec-workflow/\n    steering/\n      product.md\n      tech.md\n      structure.md\n    specs/\n    approvals/\n    templates/\n  packages/\n    core/\n      src/\n        utils/\n        locators.ts\n        resolve.ts\n        index.ts\n    context/\n      src/{store.ts,index.ts}\n    menu/\n      src/{hud.ts,tm-menu.ts,index.ts}\n    workflows/\n      src/{types.ts,engine.ts,index.ts}\n    selectors/\n      *.json\n    inspector/\n      src/{overlay.ts,picker.ts,selector-suggest.ts,sanitize.ts,index.ts}\n    recorder/\n      src/{session.ts,serialize.ts,to-workflow.ts,hotkeys.ts,index.ts}\n    scripts/\n      index.ts\n      <site>/\n        <page>.ts\n  apps/\n    userscripts/\n      package.json\n      tsconfig.json\n      vite.config.ts\n      dist/\n    wxt-extension/\n      package.json\n      tsconfig.json\n      wxt.config.ts\n      src/entrypoints/content.ts\n\n```\n\nNaming Conventions\n- Files: TypeScript source in `camelCase` or descriptive kebab-case where appropriate (e.g., `scroll-until.ts`); JSON selector maps in snake_case (e.g., `oracle.json`).\n- Selector keys: lower_snake_case with clear intent (`save_button`, `toast_area`).\n- Page module ids: `site-page` slug (e.g., `oracle-edit`).\n- Workflow ids: dashed strings describing action (`fill-and-save`).\n- Packages: lowercase descriptive names (`core`, `context`, `menu`).\n- Logs: `[DGX]` prefix for all console output.\n\nImport Patterns\n1. External dependencies (Node/browser APIs, third-party libraries).\n2. Internal packages via aliases (`@core`, `@context`, `@menu`, `@workflows`, `@selectors`, `@inspector`, `@recorder`).\n3. Relative imports within package modules.\n4. Style assets or CSS injections last (handled via `GM_addStyle`).\n\nCode Structure Patterns\n- Module files: imports → constants/types → main implementation → helpers → exports.\n- Workflow definitions: selectors, workflows, and module metadata exported from page modules; DSL steps declared near usage with minimal inline logic.\n- Utilities: single responsibility per file; expose typed functions via `index.ts` barrels.\n\nOrganization Principles\n1. **Spec-Driven**: Every implementation artifact ties back to approved specs/steering; specs reside under `.spec-workflow/specs` with lifecycle status.\n2. **Modularity**: Shared logic lives under `packages/`; page-specific code resides under `packages/scripts/<site>/`.\n3. **Testability**: Core utilities and workflows engine expose pure, testable functions; page modules focus on configuration.\n4. **Isolation**: Inspector and recorder packages contain overlay UI and event logic; they depend on resolvers but not vice versa.\n5. **Cross-Target Parity**: Both userscript and MV3 builds import from the same packages; environment-specific code is isolated in application layer.\n\nModule Boundaries\n- `core`: DOM utilities, resolvers, wait/scroll/collect helpers; no knowledge of recorder HUD.\n- `context`: Storage implementations and adapters; consumed by workflows engine and HUD.\n- `menu`: HUD components and Tampermonkey/Violentmonkey menu registration.\n- `workflows`: DSL types, engine execution, logging.\n- `selectors`: JSON maps consumed by resolver utilities.\n- `inspector`: Overlay + selector suggestion logic; emits mappings but does not write files directly.\n- `recorder`: Uses inspector suggestions to build steps and selector entries; outputs data to page modules/selectors.\n- `scripts`: Page modules referencing selectors, workflows, HUD/Hooks.\n- `apps/userscripts`: Build pipeline; no business logic.\n- `apps/wxt-extension`: MV3 packaging; thin wrapper around packages.\n\nCode Size Guidelines\n- Package modules target ≤ 300 lines per file; split large utilities by concern.\n- Functions aim for ≤ 50 lines with clear branching; larger logic broken into helper functions.\n- Page modules remain declarative (<200 lines) by offloading logic to packages.\n- Avoid nested control flow beyond 3 levels; use early returns.\n\nSpec & Documentation Handling\n- Steering docs under `.spec-workflow/steering/` treated as canonical project charter; updates require approval workflow.\n- Feature specs live in `.spec-workflow/specs/` following requirements → design → tasks templates; version and changelog per update.\n- Approvals stored under `.spec-workflow/approvals/` with traceability to spec IDs and steering revisions.\n\nQuality Gates\n- Conventional commits referencing relevant scopes and spec IDs.\n- PRs link to approved specs and demonstrate acceptance criteria via demo workflows or tests.\n- Recorder exports validated before merge; include sample replay logs when feasible.\n- Ensure both userscript and MV3 builds compile before release tags.\n\nDecision Log Expectations\n- Significant architecture or tooling decisions captured in specs or ADRs under `.spec-workflow/archive/` for historical context.\n- Keep rationale updated when revisiting selectors, workflow patterns, or build strategy.\n",
  "fileStats": {
    "size": 4990,
    "lines": 113,
    "lastModified": "2025-10-20T02:56:36.239Z"
  },
  "comments": []
}