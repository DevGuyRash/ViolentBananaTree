{
  "id": "snapshot_1760931338217_gp9dnoq9a",
  "approvalId": "approval_1760931338214_vf72aqtaz",
  "approvalTitle": "Design — DGX Modular Userscripts Foundation — Program Charter & Backlog",
  "version": 1,
  "timestamp": "2025-10-20T03:35:38.217Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# DGX Modular Userscripts Foundation — Program Charter & Backlog Design\n\n## Overview\n\nTranslate the approved charter into an implementation-agnostic delivery plan that maps streams, milestones, and acceptance bar to concrete spec artifacts without prescribing code-level detail.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n- Preserve TypeScript-only, Vite + vite-plugin-monkey userscript build and WXT MV3 parity with no webpack.\n- Adhere to GM storage, BroadcastChannel sync, selector stability, performance caps (≤150 ms polling, ≤8 s timeouts), and privacy defaults (masking inputs, no remote telemetry).\n\n### Project Structure (structure.md)\n- Organize charter outputs by existing packages (`core`, `workflows`, `menu`, `context`, `selectors`, `inspector`, `recorder`, `scripts`) and apps directories (`apps/userscripts`, `apps/wxt-extension`).\n- Reference docs set (`README.md`, `AGENTS.md`, `CONTRIBUTING.md`, `RECORDER.md`) as canonical documentation touchpoints.\n\n## Code Reuse Analysis\n- Emphasize reuse of existing package boundaries; backlog items should extend rather than duplicate.\n- Highlight inspector/recorder modules as primary surfaces for recorder-first goals; workflows DSL and context store provide shared foundations.\n\n### Existing Components to Leverage\n- **packages/core**: DOM resolvers, waits, scroll/collect utilities.\n- **packages/workflows**: DSL, engine, executor, logging.\n- **packages/menu**: HUD + GM menu integration for command palette.\n- **packages/context**: GM-backed context store with TTL and sync.\n- **packages/selectors**: JSON selector maps, stability metadata.\n- **packages/inspector**: Overlay, selector suggestions, stability scoring.\n- **packages/recorder**: Event capture, mapping UI, export pipeline.\n- **apps/userscripts** & **apps/wxt-extension**: Build pipelines ensuring parity.\n- **Documentation**: README/AGENTS/RECORDER for onboarding and agent guidance.\n\n### Integration Points\n- **GM_* APIs + BroadcastChannel** for context sync across tabs.\n- **HUD + Native Menus** to expose workflows and recorder toggles.\n- **Selector Resolver** bridging selector maps with workflows engine.\n- **Recorder Export** writing selectors JSON and page modules in scripts package.\n\n## Architecture\n\n- Maintain modular monorepo with shared packages; page modules stay declarative and leverage DSL steps.\n- Ensure architecture supports Tampermonkey/Violentmonkey baseline with optional MV3 build reusing same code.\n- Keep inspector/recorder layered atop selectors/workflows without cross-dependency loops (inspector suggests selectors, recorder writes outputs; core utilities remain dependency-free of UI).\n\n### Modular Design Principles\n- Single-responsibility packages per steering structure.\n- Clear public interfaces via TypeScript types and index exports.\n- Avoid platform-specific logic outside app shells; code stays environment-agnostic.\n\n```mermaid\ngraph TD\n    Shell[Userscript Shell] --> Registry[Page Registry]\n    Registry --> Modules[Page Modules]\n    Shell --> HUD[HUD & Menu]\n    Shell --> Context[Context Store]\n    Modules --> Workflows[Workflows DSL]\n    Modules --> Selectors[Selector Maps]\n    Shell --> Inspector[Inspector]\n    Shell --> Recorder[Recorder]\n    Workflows --> Core[Core Utilities]\n    Recorder --> Selectors\n    Recorder --> Modules\n```\n\n## Components and Interfaces\n\n### Charter Document\n- **Purpose:** Canonical reference for vision, goals, constraints, success metrics, risk mitigations.\n- **Interfaces:** Sections covering vision, personas, goals, non-goals, architecture, glossary.\n- **Dependencies:** Steering docs for authoritative scope, requirements acceptance criteria.\n- **Reuses:** Terminology and constraints from product.md and tech.md.\n\n### Backlog Streams\n- **Purpose:** Grouped feature list guiding implementation sequencing.\n- **Interfaces:** Stream definitions (Core, Workflows, UI/HUD, etc.), feature descriptions, links to milestones.\n- **Dependencies:** Selector system, workflows DSL, HUD, context store, inspector, recorder packages.\n- **Reuses:** Module boundaries to prevent duplication.\n\n### Milestones & Acceptance Bar\n- **Purpose:** Checklist for MVP vs post-MVP scope, shared definition of done across features.\n- **Interfaces:** Milestone tables, acceptance bar bullet list.\n- **Dependencies:** Backlog stream entries, steering success metrics, non-functional constraints.\n- **Reuses:** Performance, reliability, privacy criteria from tech.md.\n\n## Data Models\n\n- No new runtime data structures defined; documents reference existing selector maps, workflow DSL types, and context store schema from steering docs.\n\n## Error Handling\n\n- Risks and mitigations captured directly in charter section; emphasis on guarding against selector drift, CSP failures, scroll loops, privacy leaks.\n- Recorder and HUD error reporting rely on core logging patterns (structured `[DGX]` logs).\n\n## Testing Strategy\n\n- Align acceptance bar with required validation: cross-platform parity tests (Tampermonkey/Violentmonkey, optional MV3), workflow smoke tests, recorder replay verification.\n- Encourage unit testing for core utilities, integration tests for workflows engine, manual HUD/recorder QA per steering QA checklist.\n",
  "fileStats": {
    "size": 5242,
    "lines": 97,
    "lastModified": "2025-10-20T03:35:33.155Z"
  },
  "comments": []
}