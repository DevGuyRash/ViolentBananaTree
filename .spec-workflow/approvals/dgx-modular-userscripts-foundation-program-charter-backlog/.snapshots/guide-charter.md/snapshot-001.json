{
  "id": "snapshot_1760934416141_7s4rv3jc9",
  "approvalId": "approval_1760934416138_of2dhgedb",
  "approvalTitle": "dgx-modular-userscripts-foundation charter",
  "version": 1,
  "timestamp": "2025-10-20T04:26:56.141Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# DGX Modular Userscripts Foundation Charter\n\n## Vision\nDeliver a recorder-first automation foundation that lets teams and AI agents compose resilient Tampermonkey and Violentmonkey workflows in minutes, pairing declarative DSL steps with stability-scored selector maps, synchronized context, and HUD-driven execution backed by an optional MV3 build.\n\n## Problem Statement\nTeams rely on ad-hoc userscripts that are brittle, undocumented, and slow to extend; they lack disciplined selector strategies, cross-tab state, and approachable tooling for recording and replaying workflows, making upkeep costly whenever target pages drift.\n\n## Goals\n- Provide a declarative workflow engine covering click, type, wait, scroll, collect, conditionals, and assertions so automation intent stays observable and testable.\n- Ship inspector-guided selector authoring with stability scoring and scoped fallbacks that keep workflows durable as pages evolve.\n- Offer HUD and native userscript menus with parity so power users can trigger workflows, monitor status, and toggle the recorder in one place.\n- Maintain a context store using GM storage plus BroadcastChannel sync that preserves state across tabs while honoring TTL expectations.\n- Ensure recorder exports selectors and workflow steps with masking by default, reducing time-to-first-workflow to under ten minutes.\n- Keep userscript and MV3 builds in lockstep through shared TypeScript packages and Vite/WXT pipelines.\n\n## Success Metrics\n- Time to author a new page workflow: ≤10 minutes using inspector and recorder handoff.\n- Selector miss rate during workflow runs: <5% with logged `[DGX]` diagnostics referencing attempted strategies.\n- Recorder export accuracy: ≥95% of recorded flows require no manual selector edits before execution.\n- Cross-target parity: Tampermonkey, Violentmonkey, and MV3 smoke workflows pass with identical behavior.\n- Privacy adherence: 100% of masked recorder inputs remain redacted in stored selectors, workflows, and logs.\n\n## Non-Goals\n- Introducing remote services, telemetry backends, or cloud storage for workflows or context data.\n- Extending automation beyond the browser (no desktop or native app control).\n- Implementing dynamic code loading or remote script chunk delivery.\n- Building full analytics dashboards beyond HUD status badges and logs.\n- Delivering auto-healing selectors or plugin ecosystems in the initial charter scope.\n\n## Personas\n- **Script Author:** Needs a predictable scaffold and recorder workflow to add or adjust page-specific automations without digging into low-level DOM APIs.\n- **AI Agent Contributor:** Follows specs, selector schemas, and charter terminology to extend modules autonomously while respecting module boundaries.\n- **Power User:** Runs workflows via HUD or native menus, expects transparent logs, quick toggles, and safe masking of sensitive inputs.\n\n## Constraints\n- Must operate within Tampermonkey and Violentmonkey managers using granted GM APIs for storage, menus, and style injection.\n- Page CSP restrictions require client-only script injection; MV3 packaging is the sanctioned fallback when userscript injection is blocked.\n- Performance budgets cap polling intervals at ≤150 ms and workflow timeouts at ≤8 s to avoid page jank.\n- All logic remains client-side with no remote telemetry; privacy-sensitive data stays masked end-to-end.\n- Codebase adheres to prescribed package boundaries (core, workflows, menu, context, selectors, inspector, recorder, scripts, build targets) and TypeScript strictness.\n- Selector keys and workflow identifiers follow existing naming conventions (snake_case keys, dashed workflow ids, `[DGX]` log prefix).\n\n## High-Level Architecture\nThe userscript shell loads page modules from `packages/scripts`, resolves logical keys via the core resolver, and orchestrates workflows through the declarative engine. HUD components and Tampermonkey/Violentmonkey menu adapters expose commands backed by shared context store services that use GM storage and BroadcastChannel synchronization. Selector maps reside in JSON under `packages/selectors`, while inspector and recorder packages provide overlay UX, stability scoring, and export pipelines that serialize new selectors and DSL steps into the same module graph. Build targets in `apps/userscripts` and `apps/wxt-extension` compile identical TypeScript packages through Vite with vite-plugin-monkey and WXT, guaranteeing parity between userscript and MV3 distributions.\n\n## Risks & Mitigations\n- **Selector Drift:** Favor semantic-first strategies (role, label, text, data attributes) with scoped fallbacks; recorder surfaces stability scores and notes to guide upkeep.\n- **CSP Injection Blocks:** Maintain MV3 packaging via WXT so restricted sites can run the same modules without unsafe-eval concerns.\n- **Infinite Scroll or Wait Loops:** Enforce scrollUntil termination caps, wait timeouts, and structured `[DGX]` logs that expose reasons for halting.\n- **PII Exposure Through Recording:** Default to masked inputs, enforce `${ctx:...}` placeholders, and sanitize logs via recorder utilities.\n- **HUD or Overlay Conflicts:** Namespaced styles, configurable z-index, and quick disable toggles prevent inspector and recorder UI from clashing with page chrome.\n- **Cross-Tab State Desync:** Combine GM value change listeners with BroadcastChannel signaling and TTL enforcement so context updates stay consistent.\n\n## Glossary\n- **Selector Map:** JSON mapping of logical keys to ordered locator strategies with stability metadata generated by the inspector and recorder.\n- **Workflow DSL:** Declarative step definitions (click, wait, scroll, collect, assert, conditional, foreach) executed by the workflows engine.\n- **HUD:** Floating DGX command palette and status interface mirrored by native GM menu commands for workflow control.\n- **Context Store:** GM-backed, BroadcastChannel-synchronized state container that exposes get/set/delete/subscribe with optional TTL.\n- **Inspector:** Overlay that previews element metadata, ranks selector strategies, and guides authors toward stable logical keys.\n- **Recorder:** Session tooling that captures page interactions, applies masking, and exports selectors plus workflow steps directly into packages.\n- **ScrollUntil:** Utility that advances page or container scroll in bounded steps until an end condition, logging reasons for completion.\n- **Logical Key:** Stable identifier used across selectors, workflows, and recorder exports to decouple automation logic from raw DOM queries.\n",
  "fileStats": {
    "size": 6547,
    "lines": 64,
    "lastModified": "2025-10-20T04:26:41.792Z"
  },
  "comments": []
}